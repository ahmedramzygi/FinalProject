  Parameters:
    AMItoUse:
        Description: AMI to use for our base image
        Type: String
        Default: ami-001d9a2fbb03228ee
    VpcCIDR:
      Type: String

    PublicSubnet1CIDR:
      Type: String

    PrivateSubnet1CIDR:
      Type: String

    PublicSubnet2CIDR:
      Type: String

    PrivateSubnet2CIDR:
      Type: String


  Resources:
    # Network Infrastructure rcrs

  # 1) Project VPC for the Infrastructure
    ProjectVPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: !Ref VpcCIDR
        EnableDnsHostnames: true
  # 2) Project public subnets (1,2)
    PublicSubnet1:
      Type: AWS::EC2::Subnet
      Properties: 
        AvailabilityZone: !Select [ 0, !GetAZs '' ]
        CidrBlock: !Ref PublicSubnet1CIDR
        MapPublicIpOnLaunch: true
        Tags: 
          - Key: Name
            Value: "Public Subnet AZ1"
        VpcId: !Ref ProjectVPC




    PublicSubnet2:
      Type: AWS::EC2::Subnet
      Properties: 
        AvailabilityZone: !Select [ 1, !GetAZs '' ]
        CidrBlock: !Ref PublicSubnet2CIDR
        MapPublicIpOnLaunch: true
        Tags: 
          - Key: Name
            Value: "Public Subnet AZ2"
        VpcId: !Ref ProjectVPC
  # 3) Project private subnets (1,2)
    PrivateSubnet1:
      Type: AWS::EC2::Subnet
      Properties: 
        AvailabilityZone: !Select [ 0, !GetAZs '' ]
        CidrBlock: !Ref PrivateSubnet1CIDR
        MapPublicIpOnLaunch: false
        Tags: 
          - Key: Name
            Value: "Private Subnet1 AZ1"
        VpcId: !Ref ProjectVPC


    PrivateSubnet2:
      Type: AWS::EC2::Subnet
      Properties: 
        AvailabilityZone: !Select [ 1, !GetAZs '' ]
        CidrBlock: !Ref PrivateSubnet2CIDR
        MapPublicIpOnLaunch: false
        Tags: 
          - Key: Name
            Value: "Private Subnet1 AZ2"
        VpcId: !Ref ProjectVPC

  # 4) Project Elastic IP (1,2)      
    EIP1:
      Type: AWS::EC2::EIP
      DependsOn: AttachInternetGateway
      Properties:
          Tags:
          - Key: Name
            Value: "Elastic IP for our NAT Gateway 1"
    EIP2:
      Type: AWS::EC2::EIP
      Properties:
          Tags:
          - Key: Name
            Value: "Elastic IP for our NAT Gateway 2"
  # 5) Project NatGateway for each public subnet (1,2)  
    NAT1:
      Type: AWS::EC2::NatGateway
      Properties:
          AllocationId:
            Fn::GetAtt:
            - EIP1
            - AllocationId
          SubnetId: !Ref PublicSubnet1
          Tags:
          - Key: Name
            Value: "NAT to be used by servers in the private subnet1"

    NAT2:
      Type: AWS::EC2::NatGateway
      Properties:
          AllocationId:
            Fn::GetAtt:
            - EIP2
            - AllocationId
          SubnetId: !Ref PublicSubnet2
          Tags:
          - Key: Name
            Value: "NAT to be used by servers in the private subnet2"

  #6) Project InternetGateway  
    InternetGW:
      Type: AWS::EC2::InternetGateway

    AttachInternetGateway:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId: !Ref ProjectVPC
        InternetGatewayId: !Ref InternetGW

  #7) Project Public routes
    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties: 
        Tags: 
          - Key: Name
            Value: "Public Route Table"
        VpcId: !Ref ProjectVPC


    PublicInternetRoute:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId:
          Ref: PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId:
          Ref: InternetGW

    AssociatePUBRT1:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties: 
        RouteTableId: !Ref PublicRouteTable
        SubnetId: !Ref PublicSubnet1

    AssociatePUBRT2:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties: 
        RouteTableId: !Ref PublicRouteTable
        SubnetId: !Ref PublicSubnet2
  #8) Project Private routes

    PrivateRouteTable1:
      Type: AWS::EC2::RouteTable
      Properties: 
          VpcId: !Ref ProjectVPC
          Tags: 
              - Key: Name 
                Value: !Sub Private Routes (AZ1)


    PrivateInternetOutboundRoute:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId:
          Ref: PrivateRouteTable1
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId:
          Ref: NAT1


    PrivateSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            SubnetId: !Ref PrivateSubnet1


    PrivateRouteTable2:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref ProjectVPC
            Tags: 
                - Key: Name 
                  Value: !Sub  Private Routes (AZ2)

    PrivateInternetOutboundRoute2:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId:
          Ref: PrivateRouteTable2
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId:
          Ref: NAT2

    PrivateSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            SubnetId: !Ref PrivateSubnet2
  #9) Project Security groups
    WebAccessSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
          GroupDescription: Allow http to our test host
          VpcId:
            Ref: ProjectVPC
          SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          SecurityGroupEgress:
          - IpProtocol: -1
            FromPort: -1
            ToPort: -1
            CidrIp: 0.0.0.0/0
  #10) Amazon s3 read only role
    S3ReadOnlyEC2:
      Type: AWS::IAM::Role
      Properties:
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - "ec2.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Path: "/"
  #11) Amazon profile for s3 read 
    ProfileWithRolesForOurApp:
      Type: AWS::IAM::InstanceProfile
      Properties: 
        Roles:
          - !Ref S3ReadOnlyEC2
  #11)Launch Configuration
    WebAppServer:
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties:
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            apt-get update -y
            apt-get install apache2 -y
            systemctl start apache2.service
            cd /var/www/html
            echo "it works! Udagram, Udacity" > index.html

        ImageId: !Ref AMItoUse
        IamInstanceProfile: !Ref ProfileWithRolesForOurApp
        SecurityGroups: 
        - !GetAtt "WebAccessSecurityGroup.GroupId"
        InstanceType: t3.medium
        BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10'
            
  #12)Target Group
    WebAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
          HealthCheckIntervalSeconds: 10
          HealthCheckPath: / # physical file path check.
          HealthCheckProtocol: HTTP
          HealthCheckTimeoutSeconds: 8
          HealthyThresholdCount: 2
          Port: 80
          Protocol: HTTP
          UnhealthyThresholdCount: 5
          VpcId: !Ref ProjectVPC
  #13)Autoscaling Group

    WebAppServerGroup:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
        # Private Subnets
        VPCZoneIdentifier:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2

        LaunchConfigurationName: !Ref WebAppServer
        MinSize: '2'
        MaxSize: '4'
        TargetGroupARNs:
        - Ref: WebAppTargetGroup
  #14)Load Balancer

    WebAppLoadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Subnets:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
        SecurityGroups: 
        - !GetAtt "WebAccessSecurityGroup.GroupId"
  #14)Load Balancer listener
    LoadBalancerListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebAppTargetGroup

        LoadBalancerArn: !Ref WebAppLoadBalancer
        Port: '80'
        Protocol: HTTP

  #15)Load Balancer listener rule
    LoadBalancerListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref WebAppTargetGroup
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref LoadBalancerListener
        Priority: 1
  Outputs:

    DNS:
      Description: The website URL
      Value:
       Fn::Join: ["", ["http://", !GetAtt WebAppLoadBalancer.DNSName]]


      